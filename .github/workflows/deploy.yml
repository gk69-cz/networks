# .github/workflows/deploy.yml

name: Deploy HTML App with Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform
      # Import existing resources if not in the state
      - name: Import Resource Group if not managed
        run: |
          terraform state show azurerm_resource_group.rg || \
          terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg
        working-directory: terraform

      - name: Import Virtual Network if not managed
        run: |
          terraform state show azurerm_virtual_network.vnet || \
          terraform import azurerm_virtual_network.vnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vnet
        working-directory: terraform

      - name: Import Subnet if not managed
        run: |
          terraform state show azurerm_subnet.subnet || \
          terraform import azurerm_subnet.subnet /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/virtualNetworks/tf-linux-vnet/subnets/tf-linux-subnet
        working-directory: terraform

      - name: Import Public IP if not managed
        run: |
          terraform state show azurerm_public_ip.public_ip || \
          terraform import azurerm_public_ip.public_ip /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/publicIPAddresses/tf-linux-public-ip
        working-directory: terraform

      - name: Import Network Interface if not managed
        run: |
          terraform state show azurerm_network_interface.nic || \
          terraform import azurerm_network_interface.nic /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Network/networkInterfaces/tf-linux-nic
        working-directory: terraform

      - name: Import Virtual Machine if not managed
        run: |
          terraform state show azurerm_linux_virtual_machine.linux_vm || \
          terraform import azurerm_linux_virtual_machine.linux_vm /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tf-linux-rg/providers/Microsoft.Compute/virtualMachines/tf-linux-vm
        working-directory: terraform
      # Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform

      # Terraform Apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: terraform

      # Retrieve VM Details from Terraform Output
      - name: Retrieve Terraform Outputs
        id: terraform_output
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip_address)
          PRIVATE_KEY=$(terraform output -raw private_key)
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV
          echo "${PRIVATE_KEY}" > private_key.pem
          chmod 600 private_key.pem

        working-directory: terraform

      # Set up Ansible
      - name: Install Ansible
        run: sudo apt-get install -y ansible

      # Configure Ansible Inventory
      - name: Configure Ansible Inventory
        run: |
          echo "[azure_vm]" > inventory
          echo "${{ env.public_ip }} ansible_user=azureuser ansible_ssh_private_key_file=private_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> inventory

      # Run Ansible Playbook
      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory setup.yml

      # - name: Ensure Python 3 is Installed on VM
      # #   uses: docker://cytopia/ansible:latest
      # #   with:
      # #     args: >
      # #         ansible-playbook -i inventory -c paramiko -e "ansible_user=azureuser"
      # #         -e "ansible_password=${{ secrets.AZURE_VM_PASSWORD }}" 
      # #         -e "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"
      # #         -e "ansible_python_interpreter=/usr/bin/python3"
      # #         - <<'EOF'
      # #         ---
      # #         - name: Ensure Python 3 is installed
      # #           hosts: azure_vm
      # #           gather_facts: false
      # #           tasks:
      # #             - name: Install Python 3 on the VM using raw command
      # #               raw: |
      # #                 sudo apt-get update -y
      # #                 sudo apt-get install -y python3 python3-apt
      # #         EOF
    
      # - name: Run Ansible Playbook for Deployment
      #   uses: docker://cytopia/ansible:latest
      #   with:
      #     args: |
      #       /bin/sh -c "
      #       apk update &&
      #       apk add --no-cache sshpass &&
      #       ansible-playbook -i inventory ansible-playbook.yml
      #       "


