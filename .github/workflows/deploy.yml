name: Deploy HTML App with Terraform, Ansible, and Docker

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    name: Deploy with Terraform and Ansible
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false
        id: checkout
      - name: Log: Repository Checked Out
        run: echo "Repository checked out at ${{ steps.checkout.outputs.ref }}"

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Log: Azure Login Successful
        run: echo "Azure login successful"

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Log: Terraform Setup Complete
        run: terraform --version

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform
      - name: Log: Terraform Initialized
        run: echo "Terraform initialized in the terraform directory"

      # Terraform Apply
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve
        working-directory: terraform
      - name: Log: Terraform Applied Successfully
        run: echo "Terraform infrastructure applied successfully"

      # Get Final URL
      - name: Retrieve Final URL
        run: terraform output website_url
        working-directory: terraform
        id: get_url
      - name: Log: Final URL Retrieved
        run: echo "Application URL: ${{ steps.get_url.outputs.website_url }}"

      # Python Setup
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Log: Python Environment Setup
        run: python --version

      # Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible==6.3.0
          sudo apt-get update && sudo apt-get install -y openssh-client
      - name: Log: Dependencies Installed
        run: echo "Python, Ansible, and required libraries installed"

      # Set up SSH
      - name: Setup SSH
        run: |
          eval $(ssh-agent -s)
          chmod 600 network-vm.pem
          ssh-add network-vm.pem
          mkdir -p ~/.ssh
          echo "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n\tServerAliveInterval 60\n\tServerAliveCountMax 3" > ~/.ssh/config
      - name: Log: SSH Configured
        run: echo "SSH agent and configuration set up"

      # Verify SSH Connection
      - name: Verify SSH Connection
        run: ssh -i network-vm.pem azureuser@<IP_ADDRESS> 'echo "Connection successful"'
      - name: Log: SSH Connection Verified
        run: echo "SSH connection verified successfully"

      # Install Docker and Enable Service
      - name: Install Docker on VM
        run: ssh -i network-vm.pem azureuser@<IP_ADDRESS> '
          sudo apt-get update &&
          sudo apt-get install -y docker.io &&
          sudo systemctl start docker &&
          sudo systemctl enable docker'
      - name: Log: Docker Installed
        run: echo "Docker installed and service enabled"

      # Output Final URL
      - name: Display Application URL
        run: echo "Access your application at: ${{ steps.get_url.outputs.website_url }}"
