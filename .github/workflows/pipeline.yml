name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ADMIN_USERNAME: "azureuser"
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      RESOURCE_GROUP_NAME: "Network-RG"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init
      - name: Check if Resource Group Exists in Azure
        id: rg_exists_check
        run: |
          if az group show --name $RESOURCE_GROUP_NAME --subscription $AZURE_SUBSCRIPTION_ID; then
            echo "exists_in_azure=true" >> $GITHUB_ENV
          else
            echo "exists_in_azure=false" >> $GITHUB_ENV
          fi
  
      - name: Check if Resource Group Exists in Terraform State
        id: rg_state_check
        run: |
            if terraform state show data.azurerm_resource_group.rg; then
              echo "exists_in_state=true" >> $GITHUB_ENV
            else
              echo "exists_in_state=false" >> $GITHUB_ENV
            fi    
      - name: Import Resource Group into Terraform State if Needed
        if: env.exists_in_azure == 'true' && env.exists_in_state == 'false'
        run: terraform import azurerm_resource_group.rg "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}"
    
      - working-directory: terraform
        run: terraform apply -auto-approve -var="admin_username=${{ env.ADMIN_USERNAME }}" -var="admin_password=${{ env.ADMIN_PASSWORD }}"

      - name: Retrieve output variables from Terraform
        id: get_ip
        working-directory: terraform
        run: |
          echo "::set-output name=public_ip::$(terraform output -raw public_ip)"
          echo "::set-output name=acr_login_server::$(terraform output -raw acr_login_server)"
          echo "::set-output name=acr_admin_username::$(terraform output -raw acr_admin_username)"
          echo "::set-output name=acr_admin_password::$(terraform output -raw acr_admin_password)"
      
      - name: Set ACR Environment Variables
        run: |
          echo "ACR_LOGIN_SERVER=${{ steps.get_ip.outputs.acr_login_server }}" >> $GITHUB_ENV
          echo "ACR_ADMIN_USERNAME=${{ steps.get_ip.outputs.acr_admin_username }}" >> $GITHUB_ENV
          echo "ACR_ADMIN_PASSWORD=${{ steps.get_ip.outputs.acr_admin_password }}" >> $GITHUB_ENV
      
      - name: Log in to Azure Container Registry
        run: |
          echo "${{ env.ACR_ADMIN_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ env.ACR_ADMIN_USERNAME }} --password-stdin
      
      - name: Build Docker image
        working-directory: app
        run: |
          docker build -t flask_app:${{ github.sha }} .
          docker tag flask_app:${{ github.sha }} ${{ env.ACR_LOGIN_SERVER }}/flask_app:${{ github.sha }}
      
      - name: Push Docker image to ACR
        working-directory: app
        run: |
          docker push ${{ env.ACR_LOGIN_SERVER }}/flask_app:${{ github.sha }}
      
      - name: Update Ansible inventory with VM IP
        run: |
          echo "[all]" > ansible/inventory.ini
          echo "${{ steps.get_ip.outputs.public_ip }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_password=${{ env.ADMIN_PASSWORD }} ansible_connection=ssh ansible_port=22" >> ansible/inventory.ini
      
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible
      
      - name: Run Ansible Playbook to configure server and deploy Docker container
        env:
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
          ACR_ADMIN_USERNAME: ${{ env.ACR_ADMIN_USERNAME }}
          ACR_ADMIN_PASSWORD: ${{ env.ACR_ADMIN_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml
      
