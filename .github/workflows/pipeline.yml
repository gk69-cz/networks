name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ADMIN_USERNAME: "azureuser"
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      RESOURCE_GROUP_NAME: "Network-RG"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Download Terraform state file
      #   uses: actions/download-artifact@v3
      #   with:
      #       name: terraform-state
      #       path: terraform  # Download into the 'terraform' directory
      #   continue-on-error: true
      - name: Get DevOps Agent Public IP
        id: get_public_ip1
        run: |
          PUBLIC_IP1=$(curl -s https://api.ipify.org)
          echo "public_ip1=$PUBLIC_IP1" >> $GITHUB_ENV

      - name: Initialize Terraform
        working-directory: terraform
        run: terraform init
      - name: Check if Resource Group Exists in Azure
        id: rg_exists_check
        run: |
          if az group show --name $RESOURCE_GROUP_NAME --subscription $AZURE_SUBSCRIPTION_ID; then
            echo "exists_in_azure=true" >> $GITHUB_ENV
          else
            echo "exists_in_azure=false" >> $GITHUB_ENV
          fi
  
      - name: Check if Resource Group Exists in Terraform State
        id: rg_state_check
        run: |
            if terraform state show data.azurerm_resource_group.rg; then
              echo "exists_in_state=true" >> $GITHUB_ENV
            else
              echo "exists_in_state=false" >> $GITHUB_ENV
            fi    
      - name: Import Resource Group into Terraform State if Needed
        if: env.exists_in_azure == 'true' && env.exists_in_state == 'false'
        run: terraform import azurerm_resource_group.rg "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP_NAME }}"
    
      - working-directory: terraform
        run: terraform apply -auto-approve -var="admin_username=${{ env.ADMIN_USERNAME }}" -var="admin_password=${{ env.ADMIN_PASSWORD }}" -var="agent_public_ip=${{ env.public_ip1 }}"
      # - name: Save Terraform state file as artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: terraform-state
      #     path: terraform/terraform.tfstate
      - name: Debug Terraform outputs
        working-directory: terraform
        run: |
         terraform output
         terraform output -json
       
      - name: Retrieve Public IP from Azure
        id: get_public_ip
        run: |
         PUBLIC_IP=$(az network public-ip show \
            --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
            --name Network-PIP \
            --query ipAddress -o tsv)
          vm_name=$(terraform output -raw vm_name)  
          echo "public_ip=${PUBLIC_IP}" >> $GITHUB_ENV
          echo "VM_NAME=${vm_name}" >> $GITHUB_ENV

      - name: Update Ansible inventory with VM IP
        run: |
          echo "[all]" > ansible/inventory.ini
          echo "${{ env.public_ip }} ansible_user=${{ env.ADMIN_USERNAME }} ansible_password=${{ env.ADMIN_PASSWORD }} ansible_connection=ssh ansible_port=22" >> ansible/inventory.ini
      - name: Request JIT Access for VM
        id: request_jit_access
        run: |
            az security jit-policy initiate --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --name ${{ env.VM_NAME }} \
              --ports "22" \
              --duration "PT1H"
  
      - name: Wait for JIT Access to be Granted
        id: wait_for_jit_access
        run: |
            for i in {1..10}; do
              nc -zvw3 ${{ env.public_ip }} 22 && echo "SSH is now accessible." && exit 0
              echo "Waiting for SSH access to be granted..."
              sleep 10
            done
            echo "Failed to establish SSH access." && exit 1
      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Run Ansible Playbook to install Docker, build image, and deploy container
        run: |
          ansible-playbook -i ansible/inventory.ini ansible/playbook.yml