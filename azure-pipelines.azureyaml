trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'AzureServiceConnection'  # Replace with the name of your Azure service connection
  terraformWorkingDirectory: './terraform'
  ansibleWorkingDirectory: './ansible'
  adminUsername: 'azureuser'    # Change if needed
  sshPublicKey: '$(System.DefaultWorkingDirectory)/terraform/ssh_key.pub'
  sshPrivateKey: '$(System.DefaultWorkingDirectory)/terraform/ssh_key'

stages:
  - stage: DeployVM
    displayName: "Deploy VM with Terraform"
    jobs:
      - job: TerraformDeploy
        displayName: "Provision VM in Azure with Terraform"
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - task: TerraformInstaller@0
            inputs:
              terraformVersion: '1.0.10'

          - script: |
              ssh-keygen -t rsa -b 4096 -C "your_email@example.com" -f ssh_key -N ""
            displayName: "Generate SSH Key for VM Access"

          - task: CopyFiles@2
            inputs:
              SourceFolder: '.'
              Contents: 'ssh_key*'
              TargetFolder: '$(System.DefaultWorkingDirectory)/terraform'

          - task: TerraformCLI@0
            inputs:
              command: 'init'
              workingDirectory: $(terraformWorkingDirectory)
              commandOptions: '-input=false'

          - task: TerraformCLI@0
            inputs:
              command: 'apply'
              workingDirectory: $(terraformWorkingDirectory)
              commandOptions: '-auto-approve -var="admin_username=$(adminUsername)" -var="ssh_public_key=$(sshPublicKey)"'

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Getting VM Public IP"
                vm_ip=$(az network public-ip show --resource-group myResourceGroup --name myVM-pip --query ipAddress -o tsv)
                echo "##vso[task.setvariable variable=VM_IP]$vm_ip"

  - stage: ConfigureAndDeploy
    displayName: "Configure VM and Deploy Docker Container"
    dependsOn: DeployVM
    jobs:
      - job: AnsibleConfigure
        displayName: "Configure VM with Ansible and Deploy Docker Container"
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'

          - script: |
              echo "[myvm]" > $(ansibleWorkingDirectory)/inventory
              echo "$(VM_IP) ansible_ssh_user=$(adminUsername) ansible_ssh_private_key_file=$(sshPrivateKey)" >> $(ansibleWorkingDirectory)/inventory
            displayName: "Generate Ansible Inventory File"

          - script: |
              ansible-playbook -i $(ansibleWorkingDirectory)/inventory $(ansibleWorkingDirectory)/configure_vm.yml
            displayName: "Run Ansible Playbook"
